                                                                              
                                                                              
   farm (version                                                        index
   1.0.0)                              /home/doug/projets/python/ants/farm.py

   Provides the Farm class for the ants module.
    
   The Farm object runs its own thread and continuously create ants according to initial parameters.

          
   Modules
            ant     logging                                 threading  utils  
            config  multiprocessing                         time       uuid   

       
Classes
         threading.Thread(threading._Verbose)                                                                          
                                                                                                                       
                 Farm                                                                                                  
                                                                                                                       
                                                                                                                       
         class Farm(threading.Thread)                                                                                  
             The Farm object continuously create ants untill it runs out of food.                                      
                                                                                                                       
               Method resolution order:                                                                                
                  Farm                                                                                                 
                  threading.Thread                                                                                     
                  threading._Verbose                                                                                   
                  __builtin__.object                                                                                   
                                                                                                                       
                 ---------------------------------------------------------------------------------------------------   
                                                                                                                       
               Methods defined here:                                                                                   
                                                                                                                       
               __init__(self, playground, display_q, position, growthrate, food, life, radius)                         
                  - playground: The Playground in which ants will be created                                           
                  - display_q: The FIFO queue in wich data are sent to the Display object                              
                  - position: The Farm position as a tuple (x, y)                                                      
                  - growthrate: The growthrate in ants/minute                                                          
                  - food: The initial amount of food. One unit of food is needed for each ant creation.                
                  when the Farm runs out of food it will stay alive for <life> minutes. If ants store food             
                  in the Farm before the Farm runs out of <life>, then the ant creation process restart.               
                  - life: The number of minutes the Farm stay alive when all food has been consumed.                   
                  - radius: The radius of the Farm. This is the display radius and the area where an ant is considered 
                  at home.                                                                                             
                                                                                                                       
               __str__(self)                                                                                           
                  Returns a string representation of the farm                                                          
                                                                                                                       
               in_range(self, position)                                                                                
                  Returns if wheter or not the given position is aside the Farm.                                       
                  - Position: A tuple seen as coordinates (x, y)                                                       
                                                                                                                       
               run(self)                                                                                               
                  The Farm object main thread loop                                                                     
                                                                                                                       
               stop(self)                                                                                              
                  Stops the Farm main loop. This will exit the Farm thread.                                            
                                                                                                                       
               to_dict(self)                                                                                           
                  Returns a dict representation of the Farm object. This representation is                             
                  used by the Display workers to display the Farm.                                                     
                                                                                                                       
                 ---------------------------------------------------------------------------------------------------   
                                                                                                                       
               Methods inherited from threading.Thread:                                                                
                                                                                                                       
               __repr__(self)                                                                                          
                                                                                                                       
               getName(self)                                                                                           
                                                                                                                       
               isAlive(self)                                                                                           
                  Return whether the thread is alive.                                                                  
                                                                                                                       
                  This method returns True just before the run() method starts until just                              
                  after the run() method terminates. The module function enumerate()                                   
                  returns a list of all alive threads.                                                                 
                                                                                                                       
               isDaemon(self)                                                                                          
                                                                                                                       
               is_alive = isAlive(self)                                                                                
                  Return whether the thread is alive.                                                                  
                                                                                                                       
                  This method returns True just before the run() method starts until just                              
                  after the run() method terminates. The module function enumerate()                                   
                  returns a list of all alive threads.                                                                 
                                                                                                                       
               join(self, timeout=None)                                                                                
                  Wait until the thread terminates.                                                                    
                                                                                                                       
                  This blocks the calling thread until the thread whose join() method is                               
                  called terminates -- either normally or through an unhandled exception                               
                  or until the optional timeout occurs.                                                                
                                                                                                                       
                  When the timeout argument is present and not None, it should be a                                    
                  floating point number specifying a timeout for the operation in seconds                              
                  (or fractions thereof). As join() always returns None, you must call                                 
                  isAlive() after join() to decide whether a timeout happened -- if the                                
                  thread is still alive, the join() call timed out.                                                    
                                                                                                                       
                  When the timeout argument is not present or None, the operation will                                 
                  block until the thread terminates.                                                                   
                                                                                                                       
                  A thread can be join()ed many times.                                                                 
                                                                                                                       
                  join() raises a RuntimeError if an attempt is made to join the current                               
                  thread as that would cause a deadlock. It is also an error to join() a                               
                  thread before it has been started and attempts to do so raises the same                              
                  exception.                                                                                           
                                                                                                                       
               setDaemon(self, daemonic)                                                                               
                                                                                                                       
               setName(self, name)                                                                                     
                                                                                                                       
               start(self)                                                                                             
                  Start the thread's activity.                                                                         
                                                                                                                       
                  It must be called at most once per thread object. It arranges for the                                
                  object's run() method to be invoked in a separate thread of control.                                 
                                                                                                                       
                  This method will raise a RuntimeError if called more than once on the                                
                  same thread object.                                                                                  
                                                                                                                       
                 ---------------------------------------------------------------------------------------------------   
                                                                                                                       
               Data descriptors inherited from threading.Thread:                                                       
                                                                                                                       
               daemon                                                                                                  
                  A boolean value indicating whether this thread is a daemon thread (True) or not (False).             
                                                                                                                       
                  This must be set before start() is called, otherwise RuntimeError is                                 
                  raised. Its initial value is inherited from the creating thread; the                                 
                  main thread is not a daemon thread and therefore all threads created in                              
                  the main thread default to daemon = False.                                                           
                                                                                                                       
                  The entire Python program exits when no alive non-daemon threads are                                 
                  left.                                                                                                
                                                                                                                       
               ident                                                                                                   
                  Thread identifier of this thread or None if it has not been started.                                 
                                                                                                                       
                  This is a nonzero integer. See the thread.get_ident() function. Thread                               
                  identifiers may be recycled when a thread exits and another thread is                                
                  created. The identifier is available even after the thread has exited.                               
                                                                                                                       
               name                                                                                                    
                  A string used for identification purposes only.                                                      
                                                                                                                       
                  It has no semantics. Multiple threads may be given the same name. The                                
                  initial name is set by the constructor.                                                              
                                                                                                                       
                 ---------------------------------------------------------------------------------------------------   
                                                                                                                       
               Data descriptors inherited from threading._Verbose:                                                     
                                                                                                                       
               __dict__                                                                                                
                  dictionary for instance variables (if defined)                                                       
                                                                                                                       
               __weakref__                                                                                             
                  list of weak references to the object (if defined)                                                   

          
   Data   
            __author__ = 'Doug Le Tough'                                      
            __copyright__ = 'Copyright 2017, Doug Le Tough'                   
            __credits__ = ['Doug Le Tough']                                   
            __email__ = 'doug.letough@free.fr'                                
            __license__ = 'WTFPL'                                             
            __maintainer__ = 'Doug Le Tough'                                  
            __status__ = 'Testing'                                            
            __version__ = '1.0.0'                                             

                      
   Author             
                          Doug Le Tough                                       

                      
   Credits            
                          ['Doug Le Tough']                                   
